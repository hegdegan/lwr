import path from 'path';
import { getAssetIdentity } from './utils/identity.js';
import { handleErrors } from './utils/error-handling.js';
function createAssetMiddleware(context) {
    const { assetRegistry, runtimeEnvironment: { basePath }, } = context;
    return async (req, res) => {
        const { runtimeEnvironment } = req.getRuntimeContext(context.runtimeEnvironment);
        const { assetId, immutable, signature } = getAssetIdentity(req);
        if (basePath && !assetId.specifier.startsWith(basePath)) {
            assetId.specifier = path.join(basePath, assetId.specifier);
        }
        // Redirect if this is an external asset
        const assetUri = await assetRegistry.resolveAssetUri(assetId, runtimeEnvironment);
        if (assetUri.external) {
            res.set({
                Location: assetUri.uri,
                'cache-control': 'public, max-age=60',
            });
            res.sendStatus(302);
            return;
        }
        const asset = await assetRegistry.getAsset({ ...assetId, signature }, runtimeEnvironment, req.isSiteGeneration());
        if (req.isSiteGeneration()) {
            res.setSiteGenerationMetadata({ asset });
        }
        if (asset.mime) {
            res.type(asset.mime);
        }
        if (runtimeEnvironment.immutableAssets && immutable) {
            res.setHeader('Cache-control', 'public, max-age=12895706, immutable');
        }
        else if (runtimeEnvironment.immutableAssets) {
            res.setHeader('Cache-control', 'public, max-age=60');
        }
        res.status(200).stream(asset.stream());
    };
}
export function assetMiddleware(app, context) {
    const paths = context.appConfig.assets.map((a) => a.urlPath + app.getRegexWildcard());
    app.get([...paths, '/:apiVersion/:assetType/:immutable?/s/:signature/' + app.getRegexWildcard()], handleErrors(createAssetMiddleware(context)));
}
//# sourceMappingURL=asset-middleware.js.map