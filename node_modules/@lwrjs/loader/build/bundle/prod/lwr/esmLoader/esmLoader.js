class i{constructor(i){var t,o;this.importURICache=new Map,this.modifiers="",this.normalizeMetadata(i),this.mappingEndpoint=(null==i?void 0:i.importMappings)||null===(t=null==i?void 0:i.endpoints)||void 0===t?void 0:t.uris.mapping,(null===(o=null==i?void 0:i.endpoints)||void 0===o?void 0:o.modifiers)&&(this.modifiers=Object.entries(i.endpoints.modifiers).reduce(((i,[t,o])=>i+`${t}=${o}&`),"?"))}normalizeMetadata(i){if(i&&i.imports)for(const[t,o]of Object.entries(i.imports))if(t&&o){(Array.isArray(o)?o:[]).forEach((i=>{this.importURICache.set(i,t)}))}}async fetchMappings(i){const t=`${this.mappingEndpoint}${encodeURIComponent(i)}${this.modifiers}`,o=await globalThis.fetch(t);if(o.ok){const i=await o.json();this.normalizeMetadata(i)}}async resolve(i){let t=this.importURICache.get(i);return!t&&this.mappingEndpoint&&(await this.fetchMappings(i),t=this.importURICache.get(i)),t}}class t{constructor(i){this.importURICache=i&&i.imports?i:{imports:{}}}legacyResolve(i){return this.importURICache.imports[i]}}let o,e,n;function r(r){o=r;const{imports:s,index:a,importMappings:p,endpoints:c}=r;e=new i({imports:s,index:a,endpoints:c,importMappings:p}),n=new t(p)}async function s(i,t){const r=await async function(i,t){var r;if(i.includes("://")||i.startsWith("/"))return i;if(!e||!n)throw new Error("The ESM Loader was not initialized");if(e){const t=await e.resolve(i);if(t)return t}if(n){const t=n.legacyResolve(i);if(t)return t}const{endpoints:s}=o;if(!(null===(r=null==s?void 0:s.uris)||void 0===r?void 0:r.module))throw new Error(`Unable to resolve the URL for "${i}"`);let a=s.uris.module+encodeURIComponent(i);t&&(a+=`?importer=${encodeURIComponent(t)}`);s.modifiers&&(a+=Object.entries(s.modifiers).reduce(((i,[t,o])=>i+`${t}=${o}&`),t?"&":"?"));return a}(i,t);return import(r)}export{r as init,s as load};
