import path from 'path';
import { DEFAULT_LWR_BOOTSTRAP_CONFIG, normalizeDirectory, normalizeResourcePath } from '@lwrjs/shared-utils';
export function normalizeRoutes(routes, routeHandlers) {
    return routes.map((route) => {
        // when a route handler is set, ensure it is set in the route handler config
        if (route.routeHandler && !routeHandlers[route.routeHandler]) {
            const handlerPath = route.routeHandler;
            // the non-normalized path to the handler will be the id used when invoking the route handler
            routeHandlers[handlerPath] = handlerPath;
        }
        return {
            ...route,
            bootstrap: {
                ...DEFAULT_LWR_BOOTSTRAP_CONFIG,
                ...route.bootstrap,
            },
        };
    });
}
export function normalizeRoutePaths(routes = [], resourcePaths) {
    return routes.map((route) => {
        // route handler paths are NOT normalized here to maintain the id lookup for route handler invocation
        const { contentTemplate, layoutTemplate, subRoutes } = route;
        if (contentTemplate) {
            route.contentTemplate = path.resolve(normalizeResourcePath(contentTemplate, resourcePaths));
        }
        if (layoutTemplate) {
            route.layoutTemplate = path.resolve(normalizeResourcePath(layoutTemplate, resourcePaths));
        }
        if (subRoutes) {
            route.subRoutes = path.resolve(normalizeResourcePath(subRoutes, resourcePaths));
        }
        return route;
    });
}
export function normalizeRouteHandlerPaths(routeHandlers, resourcePaths) {
    for (const [id, handlerPath] of Object.entries(routeHandlers)) {
        routeHandlers[id] = path.resolve(normalizeDirectory(handlerPath, resourcePaths.rootDir));
    }
    return routeHandlers;
}
//# sourceMappingURL=routes.js.map