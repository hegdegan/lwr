import { normalizeRoutes } from './utils/routes.js';
import { validateLwrAppConfig } from './validation/app-config.js';
import { applySsrConfig } from './global-config.js';
/**
 * Run `initConfigs` hooks
 *
 * @remarks
 * Route normalization and validation will be executed after all config hooks have been executed.
 *
 * @privateRemarks
 * Changes to configurations are made by reference.
 *
 * @param hooks - hooks plugins
 * @param globalConfig - global configuration
 * @param runtimeEnvironment - runtime environment resolved from programmatic config and config file
 * @param globalData - resolved global data
 */
export async function executeConfigHooks(hooks, globalConfig, runtimeEnvironment, globalData, skipValidate = false) {
    if (!hooks.length) {
        return;
    }
    for (const hook of hooks) {
        if (!hook.initConfigs) {
            continue;
        }
        // eslint-disable-next-line no-await-in-loop
        await hook.initConfigs(globalConfig, globalData, runtimeEnvironment);
    }
    globalConfig.routes = normalizeRoutes(globalConfig.routes, globalConfig.routeHandlers);
    globalConfig.errorRoutes = normalizeRoutes(globalConfig.errorRoutes, globalConfig.routeHandlers);
    const ssrConfig = applySsrConfig(globalConfig);
    globalConfig.moduleProviders = ssrConfig.moduleProviders;
    globalConfig.viewTransformers = ssrConfig.viewTransformers;
    if (!skipValidate) {
        validateLwrAppConfig(globalConfig, 'post');
    }
}
/**
 * Run `onStart` hooks
 *
 * @remarks
 * Route normalization and validation will be executed after all config hooks have been executed.
 *
 * @privateRemarks
 * Changes to configurations are made by reference.
 *
 * These hooks can only modify the `routes` property in the global config.
 *
 * @param hooks - hooks plugins
 * @param globalConfig - global configuration
 */
export function executeStartHooks(hooks, globalConfig, skipValidate = false) {
    if (!hooks.length) {
        return;
    }
    for (const hook of hooks) {
        if (!hook.onStart) {
            continue;
        }
        hook.onStart(globalConfig.routes);
    }
    globalConfig.routes = normalizeRoutes(globalConfig.routes, globalConfig.routeHandlers);
    const ssrConfig = applySsrConfig(globalConfig);
    globalConfig.moduleProviders = ssrConfig.moduleProviders;
    globalConfig.viewTransformers = ssrConfig.viewTransformers;
    if (!skipValidate) {
        validateLwrAppConfig(globalConfig, 'post');
    }
}
//# sourceMappingURL=hooks.js.map