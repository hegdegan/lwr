import type { SandboxRecord as SandboxRecordBase } from '@locker/distortion/types';
import type { Instrumentation } from '@locker/instrumentation/types';
import type { Getter, ProxyTarget, SandboxKey, SandboxType } from '@locker/shared/types';
import type { GlobalObject } from '@locker/shared-dom/types';
export declare type EvalHelperBaseGenToAsync = (genNextWrapper: GeneratorMethodWrapper, genThrowWrapper: GeneratorMethodWrapper) => Promise<any>;
export declare type EvalHelperForAwaitOf = (index: number, stage: number, object?: object) => any;
export declare type EvalHelperLoadScript = (_thisArg: any, url: string | URL) => Promise<any>;
export declare type EvalHelperLoadStyle = (_thisArg: any, url: string | URL) => Promise<any>;
export interface EvalHelpers {
    asyncToGen: (func: GeneratorFunction, thisArg: any) => Promise<any>;
    makeRedResyncImports: (bindings: RedBindings) => () => RedBindings;
    forAwaitOf: (index: number, stage: number, object?: object) => any;
    genToAsync: (func: GeneratorFunction, thisArg: any) => Promise<any>;
    loadScript: (thisArg: any, url: string | URL) => Promise<any>;
    loadStyle: (thisArg: any, url: string | URL) => Promise<any>;
    makeRedGet: (...bindings: RedBindings) => RedBindings;
    makeRedSyncImports: (bindings: RedBindings) => () => RedBindings;
    namespace: <T extends object>(object: T) => Readonly<T>;
    spreadable: <T extends any[]>(array: T) => T;
    super: (target: ProxyTarget, key: PropertyKey, thisArgOrReceiver: any, args?: ArrayLike<any>) => any;
}
export declare type EvalHelpersFactory = (...args: EvalHelpersFactoryArguments) => EvalHelpers;
export declare type EvalHelpersFactoryArguments = [
    EvalHelperBaseGenToAsync,
    EvalHelperForAwaitOf,
    EvalHelperLoadScript,
    EvalHelperLoadStyle
];
export interface EvaluateOptions {
    context: any;
    document: Document;
    endowments: object;
    globalObject: GlobalObject;
    instrumentation: Instrumentation;
    key: SandboxKey;
    source: Function | string;
    sourceType: SourceType;
    type: SandboxType;
    verboseInstrumentation: boolean;
}
export interface ForOfState {
    iterable: IterableIterator<any>;
    step: IteratorResult<any> | undefined;
    sync: boolean;
}
export declare type GeneratorMethod = (...args: any[]) => IteratorReturnResult<any>;
export declare type GeneratorMethodWrapper = (value: any) => ReturnType<GeneratorMethod>;
export interface LWSTrustedTypesOptions {
    lwsKey: SandboxKey;
    targetElement?: Element;
}
export interface OpaqueWindowRecordOptions {
    globalObject: GlobalObject;
    key: SandboxKey;
    type?: SandboxType;
}
export interface RootWindowRecordOptions {
    context?: any;
    endowments?: object;
    instrumentation?: Instrumentation;
    key: SandboxKey;
    type?: SandboxType;
    verboseInstrumentation?: boolean;
}
export declare type RedBindings = Getter[];
export interface SandboxRecord extends SandboxRecordBase {
    helpers: EvalHelpers;
    root: SandboxRecord;
    trackAsFastTarget: TrackAsFastTarget;
    type: SandboxType;
    virtualEnvironmentEvaluator: VirtualEnvironmentEvaluator;
}
export declare const enum ResourceLoaderStatus {
    None = 0,
    Errored = 1,
    Loading = 2,
    Loaded = 3
}
export declare type SandboxRegistry = Record<SandboxKey, SandboxRecord>;
export declare const enum SourceType {
    Script = 0,
    Module = 1
}
export interface SecondaryWindowRecordOptions {
    context?: any;
    document: Document;
    globalObject: GlobalObject;
    key: SandboxKey;
    type?: SandboxType;
}
export declare type TrackAsFastTarget = (target: ProxyTarget) => void;
export declare type VirtualEnvironmentEvaluator = (sourceText: string) => any;
//# sourceMappingURL=types.d.ts.map